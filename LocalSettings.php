<?php
# This file was automatically generated by the MediaWiki 1.34.2
# installer. If you make manual changes, please keep track in case you
# need to recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# https://www.mediawiki.org/wiki/Manual:Configuration_settings

# Protect against web entry
if ( !defined( 'MEDIAWIKI' ) ) {
	exit;
}

## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename = "Antsawiki";
$wgMetaNamespace = "Antsawiki";
$wgUseSiteCss = true;
## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs
## (like /w/index.php/Page_title to /wiki/Page_title) please see:
## https://www.mediawiki.org/wiki/Manual:Short_URL
$wgScriptPath = "";

## The protocol and server name to use in fully-qualified URLs
$wgServer = "http://fi.antsawiki.antsamedia.eu";

## The URL path to static resources (images, scripts, etc.)
$wgResourceBasePath = $wgScriptPath;

## The URL path to the logo.  Make sure you change this from the default,
## or else you'll overwrite your logo when you upgrade!
$wgLogo = "$wgResourceBasePath/resources/assets/wiki.png";

## UPO means: this is also a user preference option

$wgEnableEmail = true;
$wgEnableUserEmail = true; # UPO

$wgEmergencyContact = "antsawiki@antsamedia.eu";
$wgPasswordSender = "antsawiki@antsamedia.eu";

$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

## Database settings
$wgDBtype = "mysql";
$wgDBserver = "";
$wgDBname = "";
$wgDBuser = "";
$wgDBpassword = "";

# MySQL specific settings
$wgDBprefix = "mwgf_";

# MySQL table options to use during installation or update
$wgDBTableOptions = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = [];

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads = true;
#$wgUseImageMagick = true;
#$wgImageMagickConvertCommand = "/usr/bin/convert";

# InstantCommons allows wiki to use images from https://commons.wikimedia.org
$wgUseInstantCommons = false;

# Periodically send a pingback to https://www.mediawiki.org/ with basic data
# about this MediaWiki instance. The Wikimedia Foundation shares this data
# with MediaWiki developers to help guide future development efforts.
$wgPingback = true;

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## Set $wgCacheDirectory to a writable directory on the web server
## to make your wiki go slightly faster. The directory should not
## be publicly accessible from the web.
#$wgCacheDirectory = "$IP/cache";

# Site language code, should be one of the list in ./languages/data/Names.php
$wgLanguageCode = "fi";

$wgSecretKey = "";
$wgLogo = 'https://commons.antsamedia.eu/images/f/ff/Antsawiki-logo.jpg';
# Changing this will log out all existing sessions.
$wgAuthenticationTokenVersion = "1";

# Site upgrade key. Must be set to a string (default provided) to turn on the
# web installer while LocalSettings.php is in place
$wgUpgradeKey = "";

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";



# Shared memory settings
$wgMainCacheType = CACHE_ACCEL;
$wgMessageCacheType = CACHE_ACCEL;
$wgCacheDirectory = '<SOME DIRECTORY>';
$wgUseLocalMessageCache = true;
$wgParserCacheType = CACHE_DB;
$wgMemCachedServers = [];
$wgUseGzip = true;
$wgEnableSidebarCache = true;

# NO DB HITS!
$wgDisableCounters = true;
$wgMiserMode = true;

# Text cache
$wgCompressRevisions = true; // use with care (see talk page)
$wgRevisionCacheExpiry = 3*24*3600;
$wgParserCacheExpireTime = 14*24*3600;

# Diffs (defaults seem ok for Ubuntu and others)
$wgDiff = "/usr/bin/diff.exe";
$wgDiff3 = "/usr/bin/diff3";
$wgUseFileCache = true;



# Enabled extensions. Most of the extensions are enabled by adding
# wfLoadExtensions('ExtensionName');
# to LocalSettings.php. Check specific extension documentation for more details.
# The following extensions were automatically enabled:

wfLoadExtension( 'VisualEditor' );

// Enable by default for everybody
$wgDefaultUserOptions['visualeditor-enable'] = 1;

// Optional: Set VisualEditor as the default for anonymous users
// otherwise they will have to switch to VE
// $wgDefaultUserOptions['visualeditor-editor'] = "visualeditor";

// Don't allow users to disable it
$wgHiddenPrefs[] = 'visualeditor-enable';

// OPTIONAL: Enable VisualEditor's experimental code features
#$wgDefaultUserOptions['visualeditor-enable-experimental'] = 1;
$PARSOID_INSTALL_DIR = 'vendor/wikimedia/parsoid'; # bundled copy
#$PARSOID_INSTALL_DIR = '/my/path/to/git/checkout/of/Parsoid/';

$wgVirtualRestConfig['modules']['parsoid'] = array(
    // URL to the Parsoid instance.
    // You should change $wgServer to match the non-local host running Parsoid
    'url' => $wgServer . $wgScriptPath . '/rest.php',
    // Parsoid "domain", see below (optional, rarely needed)
    // 'domain' => 'localhost',
);
$wgVisualEditorParsoidAutoConfig = false;

$wgVirtualRestConfig['modules']['restbase'] = [
   'url' => "",
   'domain' => '',
   'prefix' => 'not public.'


];
//$wgSessionsInObjectCache = true;

//$wgVirtualRestConfig['modules']['parsoid']['forwardCookies'] = true;

if ( $_SERVER['REMOTE_ADDR'] == '172.17.0.1'){

   $wgGroupPermissions['*']['read'] = true;

   $wgGroupPermissions['*']['edit'] = true;

};

ini_set('error_log','/tmp/php-error.log');

error_log($_SERVER['REMOTE_ADDR']);

$wgVisualEditorFullRestbaseURL = '';


# Manually configure Parsoid
$wgVisualEditorParsoidAutoConfig = false;
$wgParsoidSettings = [
    'useSelser' => true,
    'rtTestMode' => false,
    'linting' => false,
];
$wgVirtualRestConfig['modules']['parsoid'] = [];


wfLoadExtension( 'CodeMirror');

$wgDefaultUserOptions['usecodemirror'] = 1;
wfLoadExtension( 'CodeEditor' );
$wgDefaultUserOptions['usebetatoolbar'] = 1; // user option provided by WikiEditor extension
$wgScribuntoUseCodeEditor = false;
$wgGroupPermissions['sysop']['review'] = true; //allow administrators to review revisions
$wgFlaggedRevsTags = [
	'accuracy' => [ 'levels' => 3, 'quality' => 2, 'pristine' => 4 ],
	'depth'    => [ 'levels' => 3, 'quality' => 2, 'pristine' => 4 ],
	'tone'     => [ 'levels' => 3, 'quality' => 1, 'pristine' => 4 ],
];
$wgFlaggedRevsTagsRestrictions = [
	'accuracy' => [ 'review' => 1 ],
	'depth'	   => [ 'review' => 2 ],
	'style'	   => [ 'review' => 3 ],
];
$wgFlaggedRevsTagsAuto = [
	'accuracy' => 1, 'depth' => 1, 'style' => 1
];
$wgFlaggedRevsAutopromote['days'] = 60; # days since registration
$wgFlaggedRevsAutopromote['edits'] = 150; # total edit count
$wgFlaggedRevsAutopromote['excludeDeleted'] = true; # exclude deleted edits from 'edits' count above?
$wgFlaggedRevsAutopromote['spacing'] = 3; # spacing of edit intervals
$wgFlaggedRevsAutopromote['benchmarks'] = 15; # how many edit intervals are needed?
$wgFlaggedRevsAutopromote['recentContentEdits'] = 10; # $wgContentNamespaces edits in recent changes
$wgFlaggedRevsAutopromote['totalContentEdits'] = 30; # $wgContentNamespaces edits
$wgFlaggedRevsAutopromote['uniqueContentPages'] = 10; # $wgContentNamespaces unique pages edited
$wgFlaggedRevsAutopromote['editComments'] = 5; # how many edit comments used?
$wgFlaggedRevsAutopromote['email'] = true; # user must be emailconfirmed?
$wgFlaggedRevsAutopromote['userpageBytes'] = 0; # if userpage is needed, what is the min size?

wfLoadExtension( 'mediawiki-extensions-Scribunto-REL1_32');
$wgScribuntoDefaultEngine = 'luastandalone';


// Enable by default for everybody
$wgDefaultUserOptions['visualeditor-enable'] = 1;

// Optional: Set VisualEditor as the default for anonymous users
// otherwise they will have to switch to VE
// $wgDefaultUserOptions['visualeditor-editor'] = "visualeditor";

// Don't allow users to disable it
$wgHiddenPrefs[] = 'visualeditor-enable';

// OPTIONAL: Enable VisualEditor's experimental code features
#$wgDefaultUserOptions['visualeditor-enable-experimental'] = 1;

$wgVirtualRestConfig['modules']['parsoid'] = array(
    // URL to the Parsoid instance
    // Use port 8142 if you use the Debian package
    'url' => '',
    // Parsoid "domain", see below (optional)
    'domain' => '',
    // Parsoid "prefix", see below (optional)
    'prefix' => 'antsawiki:localhost:0344'
);

wfLoadExtension( 'WikibaseLexeme' );
wfLoadExtension( 'mediawiki-extensions-Scribunto-REL1_32');
$wgScribuntoUseCodeEditor = true;
$wgScribuntoDefaultEngine = 'luastandalone';


$wgEnableWikibaseRepo = false;
$wgEnableWikibaseClient = true;
require_once "$IP/extensions/Wikibase/client/WikibaseClient.php";
require_once "$IP/extensions/Wikibase/client/ExampleSettings.php";
$wmgWikibaseRepoUrl = 'https://antsadata.antsamedia.eu';
$wgWBClientSettings['repoUrl'] = 'https://antsadata.antsamedia.eu';
$wgWBClientSettings['repoScriptPath'] = '';
$wgWBClientSettings['repoArticlePath'] = '/index.php/$1';
$wgWBClientSettings['repositories']['']['repoDatabase'] = '';
$wgWBClientSettings['repositories']['']['changesDatabase'] = '';
$wgWBClientSettings['siteLinkGroups'] = [ 'antsawiki', 'mywikigroup', 'anothergroup' ];
$wgWBClientSettings['siteGlobalID'] = 'fi';
$wgWBClientSettings['siteGroup '] = 'antsawiki';
$wgShowExceptionDetails = true;
$wgShowDBErrorBacktrace = true;
$wgShowSQLErrors = true;
$wgLocalDatabases = [ '' ];


wfLoadExtension( 'Wikisource' );
wfLoadExtension( 'WikimediaBadges' );
wfLoadExtension( 'ApiFeatureUsage' );
wfLoadExtension (  'SiteMatrix'  );
wfLoadExtension( 'GeoData' );
wfLoadExtension( 'cldr' );
wfLoadExtension( 'ShortDescription' );
wfLoadExtension( 'Linter');
wfLoadExtension( 'LabeledSectionTransclusion' );
require_once "$IP/extensions/FlaggedRevs/FlaggedRevs.php";
$wgGroupPermissions['sysop']['review'] = true; //allow administrators to review revisions
wfLoadExtension( 'TemplateWizard' );

wfLoadExtension( 'Babel');
wfLoadExtension( 'LoginNotify' );




wfLoadExtension( 'Echo' );
$wgEchoEnableEmailBatch = true;
$wgEchoUseJobQueue = false;
$wgNotificationSender =	$wgPasswordSender;
$wgEchoEmailFooterAddress = 'Antsawiki, Antsamedia Foundation Inc';
$wgNotificationReplyName = 'No Reply';
$wgEchoCluster = false;
$wgEchoSharedTrackingDB = false;
$wgEchoSharedTrackingCluster = false;
$wgEchoMaxUpdateCount = 2000;
$wgEchoMaxMentionsCount = 50;
$wgEchoUseCrossWikiBetaFeature = true;
$wgEchoMentionStatusNotifications = false;
$wgEchoMentionsOnMultipleSectionEdits = true;
$wgEchoMentionOnChanges = true;
$wgEchoNewMsgAlert = true;
wfLoadExtension( 'SandboxLink' );
wfLoadExtension( 'RevisionSlider' );
wfLoadExtension( 'TemplateSandbox' );
wfLoadExtension( 'MaintenanceShell' );
// Grant access to Special:MaintenanceShell to the "developer" user group:
$wgGroupPermissions['developer']['maintenanceshell'] = true;

# Or

// Create a new "maintenanceshell" user group for Special:MaintenanceShell:
$wgGroupPermissions['maintenanceshell']['maintenanceshell'] = true;

wfLoadExtension( 'LandingCheck' );
wfLoadExtension( 'ORES' );
// Either to exclude edits made by bot to score
$wgOresExcludeBots = true;
// Models to score
$wgOresModels = [
    'damaging' => [ 'enabled' => true ],
    'goodfaith' => [ 'enabled' => true ],
    'reverted' => [ 'enabled' => true ],
    'wp10' => [ 'enabled' => true ],
];
// Thresholds of different sensitivies in ORES
$wgOresDamagingThresholds = [ 'soft' => 0.7, 'hard' => 0.5 ];
// Namespaces the ORES should score. Empty array means all namespaces.
// If not empty, it will only works on the given namespaces.
// Determine namespaces like [ 0 => true, 120 => true ].
$wgOresEnabledNamespaces = [];
// Database id for ORES service. If not determined, it'll use database name.
// You can choose 'testwiki' that ORES service sends last two digits of rev_id flipped.
// For example: https://ores.wikimedia.org/v1/scores/testwiki/damaging/12345
$wgOresWikiId = null;


wfLoadExtension( 'AutoCreateCategoryPages');
wfLoadExtension( 'BetaFeatures');
wfLoadExtension( 'CodeReview' );
wfLoadExtension( 'TwoColConflict' );
wfLoadExtension( 'Flow' );
$wgGroupPermissions['somegroup']['flow-create-board'] = true;
$wgNamespaceContentModels[NS_TALK] = 'flow-board';
$wgNamespaceContentModels[NS_USER_TALK] = 'flow-board';
$wgVirtualRestConfig['modules']['parsoid'] = array(
  // URL to the Parsoid instance
  // Use port 8142 if you use the Debian package
  'url' => 'https://antsamedia.a2hosted.com:2083',
  // Parsoid "domain", see below (optional)
  'domain' => 'localhost',
  // Parsoid "prefix", see below (optional)
  'prefix' => 'localhost',
);
$wgFlowDefaultWikiDb = false;
$wgFlowExternalStore = false;
$wgFlowContentFormat = 'html';
$wgFlowParsoidURL = '';
$wgFlowEditorList = array( 'visualeditor', 'none' );

wfLoadExtension( 'UniversalLanguageSelector' );
$wgUniversalLanguageSelectorBetaFeature = true;

$wgULSGeoService = true;
$wgULSAnonCanChangeLanguage = false;
$wgULSPosition = $wmgULSPosition;
$wgULSIMEEnabled = $wmgULSIMEEnabled;
$wgULSWebfontsEnabled = $wmgULSWebfontsEnabled;
if ( $wmgUseCodeEditorForCore || $wmgUseScribunto ) {
		$wgULSNoImeSelectors[] = '.ace_editor textarea';
	}
	if ( $wmgUseTranslate && $wmgULSPosition === 'personal' ) {
		$wgTranslatePageTranslationULS = true;
	}

$wgULSEventLogging = true;

	// Compact Language Links …

	// … as a beta feature (see T136677 for beta to stable)
	$wgULSCompactLanguageLinksBetaFeature = $wmgULSCompactLanguageLinksBetaFeature; true;

	// … as a stable feature
	$wgULSCompactLinksEnableAnon = $wmgULSCompactLinksEnableAnon;
	$wgULSCompactLinksForNewAccounts = $wmgULSCompactLinksForNewAccounts;
	$wgDefaultUserOptions['compact-language-links'] = 1;


wfLoadExtension( 'ParserFunctions');
wfLoadExtension( 'RelatedArticles' );

wfLoadExtension( 'Gadgets' );
wfLoadExtension( 'Linter');
wfLoadExtension( 'Description2' );
$wgEnableMetaDescriptionFunctions = true;
wfLoadExtension( 'OpenGraphMeta' );
wfLoadExtension( 'CiteThisPage');
wfLoadExtension( 'ImageMap' );

wfLoadExtension( 'EventLogging' ); // required dependency
wfLoadExtension( 'Math' );

$wmgUseMathML && $wmgUseRestbaseVRS;
$wgDefaultUserOptions['math'] = 'mathml';
$wgMathLaTeXMLUrl = null;
$wgMathMathMLUrl = $wmfLocalServices['mathoid'];
$wgMathConcurrentReqs = 150;
$wgMathValidModes =	array( 'png', 'source', 'mathml' );
$wgMathMathMLTimeout =	20;
$wgMathDisableTexFilter = false;
$wgMathMathMLUrl =	['http://mathoid.testme.wmflabs.org' ];
wfLoadExtension( 'Elastica');
wfLoadExtension( 'GlobalPreferences' );
wfLoadExtension( 'CirrusSearch' );
wfLoadExtension( 'AdvancedSearch' );
wfLoadExtension( 'Interwiki' );
$wgGroupPermissions['sysop']['interwiki'] = true;
wfLoadExtension( 'PageImages' );
wfLoadExtension( 'Renameuser' );
wfLoadExtension( 'LocalisationUpdate');
wfLoadExtension( 'Josa' );
wfLoadExtension( 'CategoryTree');
wfLoadExtension( 'InputBox');
wfLoadExtension( 'Poem');
wfLoadExtension( 'WikiEditor' );

wfLoadExtension( 'CommonsMetadata' );
$wgCommonsMetadataForceRecalculate = true;
$wgUseInstantCommons = true;

wfLoadExtension( 'Collection' );
wfLoadExtensions([
    'TextExtracts',
    'PageImages',
    'Popups'
]);
$wgPopupsHideOptInOnPreferencesPage = true;
$wgPopupsOptInDefaultState = '1';
$wgPopupsReferencePreviewsBetaFeature = true;


$wgVisualEditorEnableWikitextBetaFeature = true;
$wgEchoUseCrossWikiBetaFeature = true;
$wgMediaViewerIsInBeta = true;
$wgVisualEditorEnableDiffPageBetaFeature = true;


$wgAvailableRights[] = 'viewdeletedfile';
$wgHooks['TitleQuickPermissions'][] = function ( Title $title, User $user, $action, &$errors, $doExpensiveQueries, $short ) {
	return ( !in_array( $action, [ 'deletedhistory', 'deletedtext' ] ) || !$title->inNamespaces( NS_FILE, NS_FILE_TALK ) || !$user->isAllowed( 'viewdeletedfile' ) );
};
wfLoadExtension( "timeline" ); // Add EasyTimeline extension
if ( $wmgUseMobileApp ) {
	wfLoadExtension( 'MobileApp' );
}

wfLoadExtension('WikimediaMaintenance');
wfLoadExtension( 'WikimediaMessages' );
wfLoadExtension( 'Cite');
$wgCiteBookReferencing = true;
$wgCiteResponsiveReferences = true;
$wgCiteVisualEditorOtherGroup = true;
$wgAllowCiteGroups = false;
wfLoadExtension( 'TemplateData' );
wfLoadExtension( 'TemplateStyles' );
$wgTemplateStylesNamespaces	= [ 10 => true ];
wfLoadExtension( 'ConfirmEdit');

wfLoadExtension( 'CharInsert');
wfLoadExtension( 'TitleBlacklist');
$wgTitleBlacklistSources = [
    [
         'type' => 'localpage',
         'src'  => 'MediaWiki:Titleblacklist'
    ],
    [
         'type' => 'url',
         'src'  => 'https://meta.wikimedia.org/w/index.php?title=Title_blacklist&action=raw'
    ],
    [
         'type' => 'file',
         'src'  => '/home/antsawiki/blacklists/titles',
    ]
];
$wgBetaFeature = true;
wfLoadExtension( 'TimedMediaHandler' );
$wgFFmpegLocation = '/usr/bin/ffmpeg'; // Most common ffmpeg path on Linux
$wgMinimumVideoPlayerSize = 200;
$wgEnableTranscode = true;
$wgTranscodeBackgroundTimeLimit = 3600 * 8;
$wgTranscodeBackgroundMemoryLimit = 2 * 1024 * 1024; // 2GB avconv, ffmpeg2theora mmap resources so virtual memory needs to be high enough
$wgTranscodeBackgroundSizeLimit = 3 * 1024 * 1024; // 3GB
$wgFFmpegThreads = 1;
$wgTimedTextNS = 710;
$wgTimedTextForeignNamespaces = array();
$wgEnabledTranscodeSet = [
    '160p.webm' => true,
    '240p.webm' => true,
    '360p.webm' => true,
    '480p.webm' => true,
    '720p.webm' => true,
    '1080p.webm' => true,
];

$wgEnabledAudioTranscodeSet = [
	'ogg' => true,   // ogg+vorbis
	'opus' => false, // ogg+opus
	'mp3' => true,   // raw mp3
	'm4a' => false,  // mp4+aac (mp4a.40.5)
];

// If mp3 source assets can be ingested:
$wgTmhEnableMp3Uploads = true;

// If mp4 source assets can be ingested:
$wgTmhEnableMp4Uploads = false;

wfLoadExtension( 'SpamBlacklist');
wfLoadExtension( 'LabeledSectionTransclusion' );
wfLoadExtension( 'TemplateSandbox');
wfLoadExtension( 'MultimediaViewer' );
$wgMediaViewerIsInBeta = true;
wfLoadExtension( 'SyntaxHighlight_GeSHi' );
wfLoadExtension( 'TorBlock' );
# Mobile related configuration
wfLoadExtension( 'MobileFrontend' );
$wgMFAdvancedMobileContributions = true;
$wgMFContentProviderClass = 'MobileFrontend\ContentProviders\MwApiContentProvider';
$wgMFMwApiContentProviderBaseUri = 'https://en.m.wikivoyage.org/w/api.php';
wfLoadSkin( 'MinervaNeue' );

$wgMFMobileHeader = 'X-Subdomain';
if ( !$wmgEnableGeoData ) {
	$wgMFNearby = true;
}

$wgHooks['EnterMobileMode'][] = function () {
	global $wgCentralAuthCookieDomain, $wgHooks, $wgIncludeLegacyJavaScript;

	// Disable loading of legacy wikibits in the mobile web experience
	$wgIncludeLegacyJavaScript = false;

	// Hack for T49647
	if ( $wgCentralAuthCookieDomain == 'fi.antsawiki.antsamedia.eu' ) {
		$wgCentralAuthCookieDomain = 'fi.antsawiki.m.antsamedia.eu';
	} elseif ( $wgCentralAuthCookieDomain == 'wiki.antsamedia.eu' ) {
		$wgCentralAuthCookieDomain = 'wiki.m.antsamedia.eu';
	}

	// Better hack for T49647
	$wgHooks['WebResponseSetCookie'][] = function ( &$name, &$value, &$expire, &$options ) {
		if ( isset( $options['domain'] ) ) {
			if ( $options['domain'] == 'fi.antsawiki.antsamedia.eu' ) {
				$options['domain'] = 'fi.antsawiki.m.antsamedia.eu';
			} elseif ( $options['domain'] == 'wiki.antsamedia.eu' ) {
				$options['domain'] = 'wiki.m.antsamedia.eu';
			}
		}
	};

	return true;
};



wfLoadExtension( 'OAuth' );
$wgGroupPermissions['sysop']['mwoauthproposeconsumer'] = true;
$wgMWOAuthCentralWiki = false;
$wgMWOAuthRequestExpirationAge = 2592000;
wfLoadExtension( 'Nuke' );
wfLoadExtension( 'JsonConfig' );
wfLoadExtension( 'Kartographer' );
$wgKartographerUseMarkerStyle = false;
$wgKartographerStaticMapframe = false;
$wgKartographerEnableMapFrame = true;
wfLoadExtension( 'Score' );
$wgScoreLilyPond = '/path/to/your/lilypond/executable'; /* required */
$wgScoreAbc2Ly = '/path/to/your/abc2ly/executable'; /* if you want ABC to LilyPond conversion */
$wgScoreFluidsynth = '/path/to/your/fluidsynth/executable'; /* if you want MIDI to audio conversion */
$wgScoreSoundfont = '/path/to/your/soundfont/file'; /* required for Fluidsynth */
$wgScoreTimidity = '/path/to/your/timidity/executable'; /* fallback when Fluidsynth is not installed */
$wgScoreLame = '/path/to/your/lame/executable'; /* required to convert audio file for MP3 */
$wgScoreTrim = true; /* Set to false if you don't want score trimming */

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'vector', 'monobook':
$wgDefaultSkin = "vector";

# Enabled skins.
# The following skins were automatically enabled:
wfLoadSkin( 'MonoBook' );
wfLoadSkin( 'Timeless' );
wfLoadSkin( 'Vector' );
wfLoadSkin( 'MinervaNeue' );

# End of automatically generated settings.
# Add more configuration options below.

$wgTmpDirectory = "/home/antsamed/tmp_jpiqxh";

$wgDefaultUserOptions['math'] = 'mathml';
// Set MathML as default rendering option
$wgDefaultUserOptions['math'] = 'mathml';
$wgMathFullRestbaseURL = 'https://en.wikipedia.org/api/rest_';
$wgMathMathMLUrl = 'https://mathoid-beta.wmflabs.org/';
$wgMaxImageArea = 10e7;
// Set MathML as default rendering option
$wgDefaultUserOptions['math'] = 'mathml';
// Please create a config.yaml in advance. Templates are in the Mathoid repository.
$wgMathoidCli = ['/path/to/mathoid/cli.js', '-c', '/path/to/mathoid/config.yaml'];
// Raise MediaWiki's memory limit to 1.2G for mathoid.
$wgMaxShellMemory = 1228800;
$wgShowExceptionDetails = true; 
$wgFileExtensions[] = 'svg';
$wgFileExtensions[] = 'jfif';
$wgFileExtensions[] = 'amft';
$wgFileExtensions[] = 'svg';
$wgFileExtensions[] = 'ogg';
$wgFileExtensions[] = 'text';
$wgFileExtensions[] = 'rar';
